{"version":3,"sources":["components/AddCopy.js","App.js","index.js"],"names":["AddCopy","useState","copyInput","stringInput","inputValue","setInputValue","handleInputChange","e","target","name","value","className","rows","onChange","type","onClick","copyFinal","copy","initialState","map","i","copy2","trim","split","filter","length","Object","console","log","JSON","stringify","charAt","isCommented","shift","level","pic","substr","sign","typeVar","regex","match","resultado","texto","exec","push","size","parseInt","funAddInfo","stringPart","initial","undefined","cont","getStringPart","App","ReactDOM","render","document","getElementById"],"mappings":"iNA2KeA,EAvKC,WACZ,MAAoCC,mBAAS,CACzCC,UAAW,GACXC,YAAa,KAFjB,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMC,EAAoB,SAACC,GACvBF,EAAc,2BACPD,GADM,kBAERG,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UA2HnC,OACI,qCACI,iCACI,0BACIC,UAAU,eACVC,KAAK,IACLH,KAAK,YACLI,SAAUP,IAGd,uBARJ,oBASqB,uBACjB,uBACIQ,KAAK,OACLH,UAAU,eACVF,KAAK,cACLI,SAAUP,OAGlB,wBACIK,UAAU,kBACVI,QA5IS,WACjB,IAEMC,EAQV,SAAoBC,GAChB,IAAID,EAAY,GACZE,EAAe,GA6EnB,OA3EAD,EAAKE,KAAI,SAACF,EAAMG,GACZ,IAAMC,EAAQJ,EAAKK,OAAOC,MAAM,SAASC,QAAO,SAAAjB,GAAC,OAAIA,EAAEe,OAAOG,OAAS,KAavE,IAXAP,EAAe,IAAIQ,OACnBC,QAAQC,IAAI,SAASC,KAAKC,UAAUZ,IAGT,MAAvBG,EAAM,GAAGU,OAAO,IAChBb,EAAac,aAAY,EACzBX,EAAMY,SAENf,EAAac,aAAY,EAGzBZ,EAAE,EAAEA,EAAEC,EAAMI,OAAOL,IAGnB,OAFAO,QAAQC,IAAI,KAAKR,GACjBO,QAAQC,IAAI,SAASP,EAAMD,IACpBA,GACH,KAAK,EACDO,QAAQC,IAAI,YAAYR,GACxBF,EAAagB,MAAMb,EAAMD,GACzB,MACJ,KAAK,EACDO,QAAQC,IAAI,YAAYR,GACxBF,EAAaT,KAAKY,EAAMD,GACxB,MACJ,KAAK,EACDO,QAAQC,IAAI,YAAYR,GACxBF,EAAaiB,IAAId,EAAMD,GACvB,MACJ,KAAK,EAGD,OAFAO,QAAQC,IAAI,YAAYR,GACxBO,QAAQC,IAAI,KAAKP,EAAMD,GAAGgB,OAAO,EAAE,IAC5Bf,EAAMD,GAAGgB,OAAO,EAAE,IACrB,IAAK,IACDT,QAAQC,IAAI,cACZV,EAAamB,MAAK,EAClBnB,EAAaoB,QAAQ,IACrB,MACJ,IAAK,IACDX,QAAQC,IAAI,cACZV,EAAamB,MAAK,EAClBnB,EAAaoB,QAAQ,IACrB,MACJ,IAAK,IACDX,QAAQC,IAAI,cACZV,EAAamB,MAAK,EAClBnB,EAAaoB,QAAQ,IAS7B,IALA,IAAIC,EAAQ,gBACNC,OAAK,EACLC,EAAY,GACZC,EAAQrB,EAAMD,GAEkB,QAA/BoB,EAAQD,EAAMI,KAAKD,KACtBD,EAAUG,KAAKJ,EAAM,IAGzBtB,EAAa2B,KAAKC,SAASL,EAAU,IAEZ,IAArBA,EAAUhB,QACVE,QAAQC,IAAI,mBAQ5BZ,EAAS,sBAAOA,GAAP,CAAiBE,IAC1BS,QAAQC,IAAI,WAAWC,KAAKC,UAAUZ,OAGnCF,EAvFW+B,CAFL3C,EAAWF,UAAUqB,MAAM,QA6F5C,SAAuBN,EAAM+B,GAEzBrB,QAAQC,IAAI,6BAEZ,IAAIqB,EAAU,EAEdhC,EAAKE,KAAI,SAACF,EAAMG,GAETH,EAAKe,YACJL,QAAQC,IAAI,yBAEKsB,IAAdjC,EAAK4B,KACJlB,QAAQC,IAAI,uBAGZD,QAAQC,IAAI,iBAAiBqB,GAC7BtB,QAAQC,IAAIoB,EAAWZ,OAAOa,EAAQhC,EAAK4B,OAC3C5B,EAAKkC,KAAOH,EAAWZ,OAAOa,EAAQhC,EAAK4B,MAC3CI,GAAoBhC,EAAK4B,SA5GnBO,CAAcpC,EAAWZ,EAAWD,aAEtDwB,QAAQC,IAAIC,KAAKC,UAAUd,IAE3BW,QAAQC,IAAIZ,EAAU,GAAGmB,MAkIrB,oBAOA,2BCpJGkB,G,MAVH,WACR,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,SCNZC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.95bff547.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { CopyGrid } from '../components/CopyGrid';\n\n\nconst AddCopy = () => {\n    const [inputValue, setInputValue] = useState({\n        copyInput: '',\n        stringInput: ''\n    });\n    // const [stringInf, setStrinInf] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue({\n            ...inputValue,\n            [e.target.name] : e.target.value\n        });\n    };\n    \n    const handleSubmit = () => {\n        const copy = inputValue.copyInput.split('\\n');\n\n        const copyFinal = funAddInfo(copy);\n        const resultado = getStringPart(copyFinal, inputValue.stringInput);\n\n        console.log(JSON.stringify(copyFinal));\n\n        console.log(copyFinal[0].pic);\n    };\n\n    function funAddInfo(copy) {\n        let copyFinal = [];\n        let initialState = {};\n\n        copy.map((copy, i) => {\n            const copy2 = copy.trim().split(/(\\s+)/).filter(e => e.trim().length > 0);\n\n            initialState = new Object;\n            console.log('antes '+JSON.stringify(initialState));\n\n            //Si la primera esta asteriscado, eliminamos la primera posición\n            if (copy2[0].charAt(6) === \"*\"){\n                initialState.isCommented=true;\n                copy2.shift();\n            } else {\n                initialState.isCommented=false;\n            }\n\n            for(i=0;i<copy2.length;i++){\n                console.log('i '+i);\n                console.log('copy2 '+copy2[i]);\n                switch(i){\n                    case 0:\n                        console.log('entra en '+i);\n                        initialState.level=copy2[i];\n                        break;\n                    case 1:\n                        console.log('entra en '+i);\n                        initialState.name=copy2[i];\n                        break;\n                    case 2:\n                        console.log('entra en '+i);\n                        initialState.pic=copy2[i];\n                        break;\n                    case 3:\n                        console.log('entra en '+i);\n                        console.log('3 '+copy2[i].substr(0,1));\n                        switch(copy2[i].substr(0,1)){\n                            case 'X':\n                                console.log('entra en X');\n                                initialState.sign=false;\n                                initialState.typeVar='X';\n                                break;\n                            case 'S':\n                                console.log('entra en S');\n                                initialState.sign=true;\n                                initialState.typeVar='9';\n                                break;\n                            case '9':\n                                console.log('entra en 9');\n                                initialState.sign=false;\n                                initialState.typeVar='9';\n                                break;\n                        };\n\n                        let regex = /\\(([^\\)]+)\\)/g,\n                              match,\n                              resultado = [],\n                              texto = copy2[i];\n                        \n                        while((match = regex.exec(texto)) !== null){\n                            resultado.push(match[1]);\n                        }\n\n                        initialState.size=parseInt(resultado[0]);\n\n                        if (resultado.length !== 1){\n                            console.log('tiene decimales');\n                        }\n                        break;\n                    default:\n                        break;\n                };\n            };\n\n            copyFinal = [...copyFinal,initialState];\n            console.log('despues '+JSON.stringify(initialState));\n        });\n\n        return copyFinal;\n    };\n\n\n    function getStringPart(copy, stringPart) {\n\n        console.log('entra en la funcion nueva');\n\n        let initial = 0;\n\n        copy.map((copy, i) => {\n\n            if(copy.isCommented){\n                console.log('es un comentario');\n            } else {\n                if(copy.size === undefined){\n                    console.log('no tiene tamaño');\n                } else {\n                    //Pasamos los tamaños a Int\n                    console.log('initiali antes'+initial);\n                    console.log(stringPart.substr(initial,copy.size));\n                    copy.cont = stringPart.substr(initial,copy.size);\n                    initial = initial + copy.size;\n                }\n            }\n        });\n\n    };\n\n    return (\n        <>\n            <form>\n                <textarea \n                    className=\"form-control\" \n                    rows=\"3\"\n                    name=\"copyInput\"\n                    onChange={handleInputChange}\n                >\n                </textarea>\n                <br/>\n                Cadena de texto: <br/>\n                <input \n                    type=\"text\" \n                    className=\"form-control\"\n                    name=\"stringInput\"\n                    onChange={handleInputChange}\n                />\n            </form>\n            <button \n                className=\"btn btn-primary\"\n                onClick={handleSubmit}\n            >\n                Mapear\n            </button>\n\n            <hr/>\n\n            {/* <CopyGrid copy={copyFinal} /> */}\n\n        </>\n    )\n}\n\nexport default AddCopy;\n","import React from 'react';\nimport AddCopy from './components/AddCopy';\n\nimport './index.css';\n\nconst App = () => {\n    return (\n        <>\n            <h1>Copy Map App</h1>\n            <hr />\n            <AddCopy />\n        </>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}